import asyncio
import datetime
import pytz
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery
from sqlalchemy.sql.expression import or_
from sqlalchemy import func
from admin_panel import ADMIN_IDS, get_user_balance, get_user_withdrawals, top_up_balance, deduct_balance
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from admin_panel import get_pending_withdrawals
import payments
from db import Session, User
from models import WithdrawalRequest
from withdrawals import process_auto_withdrawal
from cryptobot_checks import delete_all_checks, delete_check, get_cryptobot_checks
from dataclasses import dataclass

storage = MemoryStorage()

# Replace with your actual bot token
API_TOKEN = ''
ADMIN_PANEL_CHAT_ID = ''
WITHDRAWAL_REQUESTS_CHAT_ID = '-'
ADMIN_LOG_CHAT_ID = "-"

CHANNEL_ID = -1002151662067  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_LINK = "https://t.me/sexy_cats"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª


def generate_referral_link(user_id):
    return f"https://t.me/sexy_cat_bot?start={user_id}"


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

# States for handling top-up amount input


class TopUpStates(StatesGroup):
    waiting_for_amount = State()


active_menus = {}
amounts = {}


@dataclass
class ReferralNotification:
    sender_id: int
    receiver_id: int


referral_notifications = []  # –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö


async def check_channel_subscription(message: types.Message):
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)
    if chat_member.status not in ("member", "creator", "administrator"):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup(row_width=1)
        subscribe_button = InlineKeyboardButton(
            "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
        markup.add(subscribe_button)
        await message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∞–∂–º–∏—Ç–µ /start", reply_markup=markup)
        return False
    return True


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    referral_id = message.get_args()
    session = Session()
    user = session.query(User).filter_by(id=message.from_user.id).first()
    referral_user = session.query(User).filter_by(id=referral_id).first()

    if not user:
        user = User(id=message.from_user.id,
                    username=message.from_user.username, referred_by=referral_id)
        session.add(user)
        session.commit()

        if referral_user:
            referral_notifications.append(ReferralNotification(
                sender_id=referral_user.id, receiver_id=user.id))
            await bot.send_message(referral_user.id, f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!")
            await bot.send_message(ADMIN_LOG_CHAT_ID, f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä–æ—á–µ—Ä–∞ @{user.username} –æ—Ç @{referral_user.username}!")

    if not await check_channel_subscription(message):
        return

    if user.username:
        if "_" in user.username:
            username_display = "–î—Ä–æ—á–µ—Ä"
        else:
            username_display = f"{user.username}"
    else:
        username_display = "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"

    # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = f"""–í–µ–ª–∫–æ–º, {username_display} üëàü§ì
–ó–∞—à–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –≤—Å–µ —Ç–∞–∫–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å TON?

–ö–æ—Ä–æ—Ç–∫–æ –æ –ø—Ä–æ–µ–∫—Ç–µ:
–î–∞–µ—à—å –∫–æ—à–∫–µ –∏–≥—Ä—É—à–∫—É = –∂–¥–µ—à—å –æ—Ä–≥–∞–∑–º = üí∞

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∂–º–∏ "–ö—É–ø–∏—Ç—å –ò–≥—Ä—É—à–∫–∏üçå"!

–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —á–∞—Ç—É:
[Telegram Channel](https://t.me/sexy_cats)
[Telegram Chat](https://t.me/sexycats_chat)
"""

    # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
    image_path = "img/start.png"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ start.jpg –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ img

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    item2 = types.KeyboardButton("üëõ–ö–æ—à–µ–ª–µ–∫")
    item3 = types.KeyboardButton("üêà–ü—Ä–æ—Ñ–∏–ª—å")
    item4 = types.KeyboardButton("–ö—É–ø–∏—Ç—å –ò–≥—Ä—É—à–∫–∏üçå")
    item5 = types.KeyboardButton("üì•–í—ã–≤–µ—Å—Ç–∏ TON")
    item6 = types.KeyboardButton("ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
    markup.add(item1, item2, item3, item4, item5, item6)

    try:
        with open(image_path, 'rb') as photo:
            await message.answer_photo(photo, caption=welcome_text, parse_mode="Markdown", reply_markup=markup)
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {image_path}")
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(welcome_text, parse_mode="Markdown", reply_markup=markup)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    active_menus[message.chat.id] = None
    session.close()


@dp.message_handler(lambda message: message.text == "üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def handle_top_up(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ TON:")
    await TopUpStates.waiting_for_amount.set()


@dp.message_handler(state=TopUpStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    if message.text in ["üëõ–ö–æ—à–µ–ª–µ–∫", "üêà–ü—Ä–æ—Ñ–∏–ª—å", "–ö—É–ø–∏—Ç—å –ò–≥—Ä—É—à–∫–∏üçå", "üì•–í—ã–≤–µ—Å—Ç–∏ TON"]:
        # User wants to go to a different menu
        if message.text == "üëõ–ö–æ—à–µ–ª–µ–∫":
            await handle_wallet(message)
        elif message.text == "üêà–ü—Ä–æ—Ñ–∏–ª—å":
            await handle_profile(message)
        elif message.text == "–ö—É–ø–∏—Ç—å –ò–≥—Ä—É—à–∫–∏üçå":
            await handle_buy_feed(message)
        elif message.text == "üì•–í—ã–≤–µ—Å—Ç–∏ TON":
            await handle_withdrawal(message)
        await state.finish()
    else:
        # User is trying to enter an amount
        try:
            amount = float(message.text)
            if amount < 0.01:
                await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 0.01 TON. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â—ë —Ä–∞–∑:")
                return
            elif amount > 10000:
                await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10000 TON. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â—ë —Ä–∞–∑:")
                return

            amounts[message.chat.id] = amount

            invoice = await payments.create_invoice(amount)

            markup = types.InlineKeyboardMarkup()
            pay_button = types.InlineKeyboardButton(
                "–û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç", url=invoice.bot_invoice_url)
            check_button = types.InlineKeyboardButton(
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice.invoice_id}")
            markup.add(pay_button, check_button)

            await message.answer(f"–°—á—ë—Ç –Ω–∞ {amount} TON —Å–æ–∑–¥–∞–Ω! –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∂–º–∏ üëá", reply_markup=markup)
            await state.finish()

            # Check for first deposit and reward referrer
            session = Session()
            user = session.query(User).get(message.chat.id)

            if user.balance >= 2.0 and not user.First_deposit:
                user.First_deposit = True

                # Reward referrer
                if user.referred_by:
                    referrer = session.query(User).get(user.referred_by)
                    referrer.balance += 0.02
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await bot.send_message(referrer.id, f"–ü—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏ –∑–∞ –¥—Ä–æ—á–µ—Ä–∞ 0.02")
                    session.commit()

            session.commit()
            session.close()

        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@dp.callback_query_handler(lambda call: call.data.startswith('check_'))
async def handle_check_payment(call: types.CallbackQuery):
    invoice_id = call.data.split('_')[1]

    await call.message.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞... ‚è≥")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    for _ in range(3):
        status = await payments.get_invoice_status(invoice_id)
        print(f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å—á–µ—Ç–∞ {invoice_id}: {status}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ADMIN_LOG_CHAT_ID —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
        if status != 'waiting':
            await bot.send_message(ADMIN_LOG_CHAT_ID, f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å—á–µ—Ç–∞ {invoice_id}: {status}")

        if status == 'paid':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞
            session = Session()
            user = session.query(User).get(call.message.chat.id)

            if call.message.chat.id in amounts:
                user.balance += amounts[call.message.chat.id]
                # –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                deposited_amount = amounts[call.message.chat.id]
                del amounts[call.message.chat.id]

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ First_deposit –∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                if user.balance >= 2.0 and not user.First_deposit:
                    user.First_deposit = True

                    # –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    if user.referred_by:
                        referrer = session.query(User).get(user.referred_by)
                        referrer.balance += 0.02
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await bot.send_message(referrer.id, f"–ü—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 0.02")
                        session.commit()

                session.commit()
                session.close()
                print(
                    f"–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω! –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {deposited_amount} TON. @{call.message.chat.username}")

                await bot.send_message(ADMIN_LOG_CHAT_ID, f"–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω! –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {deposited_amount} TON. @{call.message.chat.username}")

                await call.message.answer(f"–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω! –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {deposited_amount}.")
            else:
                print(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. @{call.message.chat.username}")

                await bot.send_message(ADMIN_LOG_CHAT_ID, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. @{call.message.chat.username}")

                await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")

            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ —Å—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω
        else:
            delay = random.randint(2, 5)
            await asyncio.sleep(delay)

    if status != 'paid':
        print(f"–°—á—ë—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω. @{call.message.chat.username}")

        await bot.send_message(ADMIN_LOG_CHAT_ID, f"*–°—á—ë—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω. @{call.message.chat.username}*")

        await call.message.answer("–°—á—ë—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")


@dp.message_handler(lambda message: message.text == "üëõ–ö–æ—à–µ–ª–µ–∫")
async def handle_wallet(message: types.Message):
    session = Session()
    user = session.query(User).get(message.chat.id)

    if not user:  # Check if user exists
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    image_path = "img/wallet.png"
    markup = types.InlineKeyboardMarkup()
    change_button = types.InlineKeyboardButton(
        "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫", callback_data="change_wallet")
    markup.add(change_button)

    wallet_text = f"–í–∞—à –∫–æ—à–µ–ª—ë–∫: `{user.wallet}`" if user.wallet else "–î—Ä–æ—á–µ—Ä, —É—Å—Ç–∞–Ω–æ–≤–∏ –∫–æ—à–µ–ª–µ–∫!"

    try:
        with open(image_path, 'rb') as photo:
            await message.answer_photo(photo, caption=wallet_text, parse_mode="Markdown", reply_markup=markup)
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {image_path}")
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(wallet_text, parse_mode="Markdown", reply_markup=markup)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ.")

    session.close()


@dp.callback_query_handler(lambda call: call.data == "change_wallet")
async def handle_change_wallet(call: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup(row_width=1)
    enter_wallet_button = types.InlineKeyboardButton(
        "–í–≤–µ—Å—Ç–∏ –∫–æ—à–µ–ª—ë–∫", callback_data="enter_wallet")
    cryptobot_button = types.InlineKeyboardButton(
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–≤–æ–¥ –≤ CryptoBot", callback_data="set_cryptobot")
    markup.add(enter_wallet_button, cryptobot_button)

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=markup)


@dp.callback_query_handler(lambda call: call.data == "enter_wallet")
async def handle_enter_wallet(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π TON –∫–æ—à–µ–ª—ë–∫:")
    await dp.current_state().set_state("waiting_for_wallet")  # Set a temporary state


@dp.message_handler(state="waiting_for_wallet")
async def process_wallet(message: types.Message, state: FSMContext):
    main_menu_options = ["üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "üêà–ü—Ä–æ—Ñ–∏–ª—å",
                         "–ö—É–ø–∏—Ç—å –ò–≥—Ä—É—à–∫–∏üçå", "üëõ–ö–æ—à–µ–ª–µ–∫", "üì•–í—ã–≤–µ—Å—Ç–∏ TON"]
    if message.text in main_menu_options:
        await state.finish()  # Exit the "waiting_for_wallet" state
        # Trigger the corresponding handler based on the message text
        if message.text == "üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
            await handle_top_up(message)
        elif message.text == "üêà–ü—Ä–æ—Ñ–∏–ª—å":
            await handle_profile(message)
        elif message.text == "–ö—É–ø–∏—Ç—å –ò–≥—Ä—É—à–∫–∏üçå":
            await handle_buy_feed(message)
        elif message.text == "üëõ–ö–æ—à–µ–ª–µ–∫":
            await handle_wallet(message)
        elif message.text == "üì•–í—ã–≤–µ—Å—Ç–∏ TON":
            await handle_withdrawal(message)
    else:
        session = Session()
        user = session.query(User).get(message.chat.id)
        user.wallet = message.text
        session.commit()
        session.close()
        await message.answer("–í–∞—à –∫–æ—à–µ–ª—ë–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        await start_handler(message)
        await state.finish()


@dp.callback_query_handler(lambda call: call.data == "set_cryptobot")
async def handle_set_cryptobot(call: types.CallbackQuery):
    session = Session()
    user = session.query(User).get(call.message.chat.id)
    user.wallet = "@CryptoBot"  # Set wallet to "@CryptoBot"
    session.commit()
    session.close()
    await call.message.answer("–ö–æ—à–µ–ª–µ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - CryptoBot!")


@dp.message_handler(lambda message: message.text == "üêà–ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile(message: types.Message):
    session = Session()
    user = session.query(User).get(message.chat.id)

    if not user:  # Check if user exists
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    user_level = get_user_level(user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "_" –≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.username:
        if "_" in user.username:
            username_display = "–î—Ä–æ—á–µ—Ä"
        else:
            username_display = f"{user.username}"
    else:
        username_display = "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"

    profile_text = f"""
{username_display}
üèÖ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_level}  

üçå –ö—É–ø–ª–µ–Ω–æ –∏–≥—Ä—É—à–µ–∫: {user.total_spent_on_feed:.5f} TON 
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.total_earned:.5f} TON
üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {user.total_bonus_profit:.5f} TON 
üì§ –í—ã–≤–µ–¥–µ–Ω–æ: {user.total_withdrawals:.5f} TON

üíé TON –±–∞–ª–∞–Ω—Å: {user.balance:.5f}
"""

    active_feed_text = ""
    for i in range(1, 12):
        toy_attr = f"toy{i}"
        time_attr = f"toy_time{i}"
        if getattr(user, toy_attr):
            purchase_time = getattr(user, time_attr)

            remaining_time_seconds = int(
                getattr(user, f"{toy_attr}_remaining_time"))

            if i == 1:
                amount = 0.1
                bonus = 0.085
            elif i == 2:
                amount = 0.5
                bonus = 0.07
            elif i == 3:
                amount = 1
                bonus = 0.45
            elif i == 4:
                amount = 3
                bonus = 0.85
            elif i == 5:
                amount = 2
                bonus = 0.65
            elif i == 6:
                amount = 5
                bonus = 1.10
#
            elif i == 7:
                amount = 8
                bonus = 1.40
            elif i == 8:
                amount = 10
                bonus = 2
            elif i == 9:
                amount = 15
                bonus = 3
            elif i == 10:
                amount = 20
                bonus = 3.5
            elif i == 11:
                amount = 25
                bonus = 4.40

            def get_hours_minutes_seconds_word(hours, minutes, seconds):
                if hours == 1:
                    hours_word = '—á–∞—Å'
                elif 2 <= hours <= 4:
                    hours_word = '—á–∞—Å–∞'
                else:
                    hours_word = '—á–∞—Å–æ–≤'

                if minutes == 1:
                    minutes_word = '–º–∏–Ω—É—Ç–∞'
                elif 2 <= minutes <= 4:
                    minutes_word = '–º–∏–Ω—É—Ç—ã'
                else:
                    minutes_word = '–º–∏–Ω—É—Ç'

                if seconds == 1:
                    seconds_word = '—Å–µ–∫—É–Ω–¥–∞'
                else:
                    seconds_word = '—Å–µ–∫—É–Ω–¥'

                return hours_word, minutes_word, seconds_word

            hours_left = remaining_time_seconds // 3600
            minutes_left = (remaining_time_seconds % 3600) // 60
            seconds_left = remaining_time_seconds % 60
            hours_word, minutes_word, seconds_word = get_hours_minutes_seconds_word(
                hours_left, minutes_left, seconds_left)

            formatted_time = purchase_time.strftime("%d %b, %H:%M:%S")
            active_feed_text += f"üçå {amount}+{bonus} TON –æ—Ç {formatted_time} (–û—Å—Ç–∞–ª–æ—Å—å {hours_left} {hours_word} {minutes_left} {minutes_word} {seconds_left} {seconds_word})\n"
    if active_feed_text:
        profile_text += "\n–ò–≥—Ä—É—à–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ!\n" + \
            active_feed_text + "\n*–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ UTC+0*"

    image_path = "img/profile.png"

    try:
        with open(image_path, 'rb') as photo:
            await message.answer_photo(photo, caption=profile_text, parse_mode="Markdown")
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {image_path}")
        await message.answer(profile_text, parse_mode="Markdown")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    session.close()


@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def handle_back_to_main_menu(message: types.Message):
    await start_handler(message)


@dp.message_handler(lambda message: message.text == "–ö—É–ø–∏—Ç—å –ò–≥—Ä—É—à–∫–∏üçå")
async def handle_buy_feed(message: types.Message):
    session = Session()
    user = session.query(User).get(message.chat.id)

    if not user:  # Check if user exists
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # Check if any feed is available for purchase
    available_feed = None
    for i in range(1, 12):
        toy_attr = f"toy{i}"
        time_attr = f"toy_time{i}"
        if getattr(user, toy_attr) == 0:  # Feed not purchased
            available_feed = i
            break

    if not available_feed:
        await message.answer("–í—Å–µ –∏–≥—Ä—É—à–∫–∏ —É–∂–µ —É –∫–æ—à–∫–∏, –Ω–µ –º–µ—à–∞–π –µ–π!")
        return
    image_path = "img/play.png"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # item1 = types.KeyboardButton("0.1 TON")
    item1 = types.KeyboardButton("8 TON")
    item2 = types.KeyboardButton("10 TON")
    item3 = types.KeyboardButton("15 TON")
    item4 = types.KeyboardButton("20 TON")
    item5 = types.KeyboardButton("25 TON")
    item6 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    # markup.add(item1, item2, item3, item4)
    markup.add(item1, item2, item3, item4, item5)
    markup.row(item6)

    buy_feed_text = "üòº–ü–æ–¥–∞—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –∫–æ—à–∫–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–≥–∞–∑–º! \n–ö–æ—Ç–æ—Ä—ã–π –æ–Ω–∞ —Ç–∞–∫ –ª—é–±–∏—Ç‚Ä¶. \n–í—Ä–µ–º—è  –æ—Ä–≥–∞–∑–º–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ–≥–æ 16 —á–∞—Å–æ–≤."

    try:
        with open(image_path, 'rb') as photo:
            await message.answer_photo(photo, caption=buy_feed_text, parse_mode="Markdown", reply_markup=markup)
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {image_path}")
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(buy_feed_text, parse_mode="Markdown", reply_markup=markup)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ –∏–≥—Ä—É—à–µ–∫.")
    session.close()


@dp.message_handler(lambda message: message.text == "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
async def handle_referral_info(message: types.Message):
    session = Session()
    user = session.query(User).get(message.chat.id)

    if not user:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    referrals = session.query(User).filter_by(referred_by=user.id).all()
    active_referrals = [ref for ref in referrals if ref.First_deposit]
    referral_text = f"""
–ú–æ–∏ –¥—Ä–æ—á–µ—Ä—ã: {len(referrals)}
–î—Ä–æ—á–µ—Ä—ã, —Å–¥–µ–ª–∞–≤—à–∏–µ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {len(active_referrals)}

–£—Ä–æ–≤–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:

–£—Ä–æ–≤–µ–Ω—å 1 (< 5 TON): –ù–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç —Å –≤—ã–≤–æ–¥–∞ –¥—Ä–æ—á–µ—Ä–∞
–£—Ä–æ–≤–µ–Ω—å 2 (5-10 TON): 1% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –≤—ã–≤–æ–¥–∞
–£—Ä–æ–≤–µ–Ω—å 3 (20-25 TON): 2% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –≤—ã–≤–æ–¥–∞
–£—Ä–æ–≤–µ–Ω—å 4 (25+ TON): 3% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –≤—ã–≤–æ–¥–∞

–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä–æ—á–µ—Ä–∞ –Ω–∞ 2.0 TON = 0.02 TON –¥–ª—è –≤–∞—Å!
"""

    referral_link = generate_referral_link(user.id)

    # Create inline keyboard with share button
    image_path = "img/referral.png"
    try:
        with open(image_path, 'rb') as photo:
            await message.answer_photo(photo, caption=referral_text + f"\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {image_path}")
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(referral_text + f"\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö.")

    session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è


@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def handle_back_to_profile(message: types.Message):
    await handle_profile(message)


@dp.message_handler(lambda message: message.text in ["8 TON", "10 TON", "15 TON", "20 TON", "25 TON"])
async def process_feed_purchase(message: types.Message):
    session = Session()
    user = session.query(User).get(message.chat.id)

    amount = float(message.text.split()[0])  # Extract amount
    if user.balance < amount:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
        return

    # Determine the toy number (toy{i})
    if amount == 0.1:
        feed_number = 1
    elif amount == 0.5:
        feed_number = 2
    elif amount == 1:
        feed_number = 3
    elif amount == 3:
        feed_number = 4
    elif amount == 2:
        feed_number = 5
    elif amount == 5:
        feed_number = 6
        ##
    elif amount == 8:
        feed_number = 7
    elif amount == 10:
        feed_number = 8
    elif amount == 15:
        feed_number = 9
    elif amount == 20:
        feed_number = 10
    elif amount == 25:
        feed_number = 11

    # Check if the toy is already purchased
    toy_attr = f"toy{feed_number}"
    time_attr = f"toy_time{feed_number}"
    if getattr(user, toy_attr):
        await message.answer(f"–ò–≥—Ä—É—à–∫–∞ –∑–∞ {amount} TON —É–∂–µ –∫—É–ø–ª–µ–Ω–∞, –∂–¥–∏ –ø–æ–∫–∞ –æ–Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ—Ç—Å—è!")
        return

    # Purchase the toy
    user.balance -= amount
    setattr(user, toy_attr, True)

    # Updating time to Moscow time
    moscow_timezone = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.datetime.now(moscow_timezone)
    setattr(user, time_attr, moscow_time)

    user.total_spent_on_feed += amount

    # Set the toy action time
    setattr(user, f"toy{feed_number}_remaining_time",
            86400)  # Changed time to 57600 seconds

    session.commit()
    session.close()

    # Calculate the return (with bonus)
    bonus = get_bonus_for_amount(amount)  # Use the new function
    return_amount = amount + bonus
    return_amount_rounded = round(return_amount, 2)

    await message.answer(f"–ò–≥—Ä—É—à–∫–∞ –∫—É–ø–ª–µ–Ω–∞! –ñ–¥–∏ –ø–æ–∫–∞ –º–∞–ª—ã—à–∫–∞ —Ä–∞–∑–≤–ª–µ—á–µ—Ç—Å—è —Å –Ω–µ–π! –í–∞–º –≤–µ—Ä–Ω–µ—Ç—Å—è {return_amount_rounded} TON.")


async def check_toys_returns():
    while True:
        session = Session()
        users = session.query(User).filter(
            or_(
                User.toy1_remaining_time > 0,
                User.toy2_remaining_time > 0,
                User.toy3_remaining_time > 0,
                User.toy4_remaining_time > 0,
                User.toy5_remaining_time > 0,
                User.toy6_remaining_time > 0,

                User.toy7_remaining_time > 0,
                User.toy8_remaining_time > 0,
                User.toy9_remaining_time > 0,
                User.toy10_remaining_time > 0,
                User.toy11_remaining_time > 0,
            )
        ).all()

        for user in users:
            for i in range(1, 12):
                remaining_time_attr = f"toy{i}_remaining_time"
                remaining_time = getattr(user, remaining_time_attr)
                if remaining_time is not None and remaining_time > 0:
                    setattr(user, remaining_time_attr, remaining_time - 1)
                    if remaining_time == 1:
                        # Time's up, process the return
                        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä –∏–≥—Ä—É—à–∫–∏ (i)
                        await return_feed_amount(user.id, i, i)

        session.commit()
        session.close()
        await asyncio.sleep(1)  # Check every second


async def return_feed_amount(user_id, feed_number, _):
    session = Session()
    user = session.query(User).get(user_id)

    if feed_number == 1:
        amount = 0.1
    elif feed_number == 2:
        amount = 0.5
    elif feed_number == 3:
        amount = 1
    elif feed_number == 4:
        amount = 3
    elif feed_number == 5:
        amount = 2
    elif feed_number == 6:
        amount = 5
##
    elif feed_number == 7:
        amount = 8
    elif feed_number == 8:
        amount = 10
    elif feed_number == 9:
        amount = 15
    elif feed_number == 10:
        amount = 20
    elif feed_number == 11:
        amount = 25

    else:
        amount = 0  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –∏–≥—Ä—É—à–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π

    bonus = get_bonus_for_amount(amount)
    return_amount = amount + bonus
    user.balance += return_amount

    setattr(user, f"toy{feed_number}", False)
    setattr(user, f"toy_time{feed_number}", None)
    setattr(user, f"toy{feed_number}_remaining_time", None)

    user.total_bonus_profit += bonus
    user.total_earned += return_amount

    await bot.send_message(ADMIN_LOG_CHAT_ID, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} ({user_id}) –ø—Ä–æ–∏–∑–æ—à–µ–ª –∫–æ—à–∞—á–∏–π –æ—Ä–≥–∞–∑–º! –û–Ω –ø–æ–ª—É—á–∏–ª {return_amount:.5f} TON")

    session.commit()
    session.close()

    # Introduce a 2-second delay before sending a message to the user
    await asyncio.sleep(5)
    await bot.send_message(user_id, f"–ö–æ—à–∞—á–∏–π –æ—Ä–≥–∞–∑–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {return_amount:.5f} TON!")


def get_bonus_for_amount(amount):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–Ω—É—Å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã."""
    if amount == 0.1:
        return 0.085
    elif amount == 0.5:
        return 0.07
    elif amount == 1:
        return 0.45
    elif amount == 3:
        return 0.85
    elif amount == 2:
        return 0.65
    elif amount == 5:
        return 1.10
 #
    elif amount == 8:
        return 1.40
    elif amount == 10:
        return 2
    elif amount == 15:
        return 3
    elif amount == 20:
        return 3.5
    elif amount == 25:
        return 4.40

    else:
        return 0


# üì•–í—ã–≤–µ—Å—Ç–∏ TON

class WithdrawalStates(StatesGroup):
    waiting_for_amount = State()
    confirming_withdrawal = State()  # New state for confirmation


@dp.message_handler(lambda message: message.text == "üì•–í—ã–≤–µ—Å—Ç–∏ TON")
async def handle_withdrawal(message: types.Message):
    session = Session()
    user = session.query(User).get(message.chat.id)

    if not user:  # Check if user exists
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    if not user.wallet:  # Check if wallet is set
        await message.answer("–≠–π –¥—Ä–æ—á–µ—Ä, –£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—à–µ–ª–µ–∫! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ üëõ–ö–æ—à–µ–ª–µ–∫.")
        return

    # Get user level and calculate fee
    user_level = get_user_level(user)
    fee_percentage, _ = calculate_withdrawal_fee(
        1, user_level)  # Calculate for 1 TON to get percentage
    fee_percentage *= 100  # Convert to percentage

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥"))
    image_path = "img/withdraw.png"
    withdrawal_text = f"""
–í–∞—à –∫–æ—à–µ–ª–µ–∫: `{user.wallet}`
–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {user.balance:.5f} TON
–í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è: {fee_percentage:.1f}%
–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –í—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 0.1 TON):
"""
    try:
        with open(image_path, 'rb') as photo:
            await message.answer_photo(photo, caption=withdrawal_text, parse_mode="Markdown", reply_markup=markup)
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {image_path}")
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(withdrawal_text, parse_mode="Markdown", reply_markup=markup)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–µ.")

    await WithdrawalStates.waiting_for_amount.set()
    session.close()


@dp.message_handler(state=WithdrawalStates.waiting_for_amount)
async def process_withdrawal_amount(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥":
        await state.finish()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
        await start_handler(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    session = Session()
    user = session.query(User).get(message.chat.id)

    try:
        amount = float(message.text)
        if amount < 0.1:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –í—ã–≤–æ–¥–∞: 0.1 TON. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:")
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏)
        user_level = get_user_level(user)

        # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Å—É–º–º—ã –∫ –≤—ã–ø–ª–∞—Ç–µ (net_amount)
        fee, _ = calculate_withdrawal_fee(amount, user_level)
        net_amount = amount - fee

        if net_amount > user.balance:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        current_balance = user.balance

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å —Å—É–º–º–æ–π net_amount
        withdrawal_request = WithdrawalRequest(
            user_id=user.id,
            username=user.username,
            wallet=user.wallet,
            amount=net_amount,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∑–∞ –≤—ã—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
            withdrawal_time=datetime.datetime.utcnow(),
            status="–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        )
        session.add(withdrawal_request)
        session.commit()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω ID –∑–∞–ø—Ä–æ—Å—É
        if withdrawal_request.id is None:
            raise ValueError("ID –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –±—ã–ª –ø—Ä–∏—Å–≤–æ–µ–Ω!")

        withdrawal_request_id = withdrawal_request.id

        # –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.balance -= amount
        user.total_withdrawals += amount

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ
        withdrawal_message = f"""
üéñÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –í—ã–≤–æ–¥ üéñÔ∏è 

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} ({user.id})
üíé TON –±–∞–ª–∞–Ω—Å –¥–æ –≤—ã–≤–æ–¥–∞: {current_balance:.5f}
üíé TON –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞: {user.balance:.5f}
üçå –ö—É–ø–ª–µ–Ω–æ –∏–≥—Ä—É—à–µ–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user.total_spent_on_feed:.5f} TON 
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user.total_earned:.5f} TON
üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user.total_bonus_profit:.5f} TON 
üì§ –í—ã–≤–µ–¥–µ–Ω–æ: {user.total_withdrawals:.5f} TON

-----------------------------------
–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount} TON 
–ö–æ–º–∏—Å—Å–∏—è: {fee:.3f} TON
–ò—Ç–æ–≥–æ: {net_amount:.3f} TON
-----------------------------------

–ö–æ—à–µ–ª–µ–∫: {user.wallet}

"""

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        confirmation_message, confirmation_markup = generate_confirmation_message(
            withdrawal_request_id, withdrawal_message)
        await bot.send_message(WITHDRAWAL_REQUESTS_CHAT_ID, confirmation_message, reply_markup=confirmation_markup)

        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—É–º–º–µ –∫ –≤—ã–ø–ª–∞—Ç–µ –∏ –∫–æ–º–∏—Å—Å–∏–∏
        await message.answer(f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –í—ã–≤–æ–¥ {net_amount:.3f} TON (–∫–æ–º–∏—Å—Å–∏—è {fee:.3f} TON).")
        await start_handler(message)  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

        await state.finish()  # –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    session.commit()
    session.close()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
def generate_confirmation_message(withdrawal_request_id, withdrawal_message):
    markup = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton(
        "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{withdrawal_request_id}")
    confirm_button = types.InlineKeyboardButton(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{withdrawal_request_id}")
    auto_withdraw_button = types.InlineKeyboardButton(
        "–ê–≤—Ç–æ –≤—ã–≤–æ–¥", callback_data=f"auto_withdraw_{withdrawal_request_id}")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞

    # –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    print(
        f"Generated cancel button callback data: {cancel_button.callback_data}")
    print(
        f"Generated confirm button callback data: {confirm_button.callback_data}")
    print(
        f"Generated auto withdraw button callback data: {auto_withdraw_button.callback_data}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä–∞–∑–º–µ—Ç–∫—É
    markup.add(cancel_button, confirm_button, auto_withdraw_button)
    return withdrawal_message, markup


@dp.callback_query_handler(lambda call: call.data.startswith('cancel_'))
async def handle_cancel_withdrawal(call: CallbackQuery):
    withdrawal_request_id = int(call.data.split('_')[1])
    session = Session()
    withdrawal_request = session.query(
        WithdrawalRequest).get(withdrawal_request_id)

    if withdrawal_request and withdrawal_request.status == "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ":
        user = session.query(User).get(withdrawal_request.user_id)
        user.balance += withdrawal_request.amount
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º total_withdrawals
        user.total_withdrawals -= withdrawal_request.amount
        withdrawal_request.status = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
        session.commit()
        await call.message.answer(f"–ó–∞—è–≤–∫–∞ {withdrawal_request.id} –æ—Ç–º–µ–Ω–µ–Ω–∞. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        await bot.send_message(user.id, f"–í—ã–≤–æ–¥ –Ω–∞ {withdrawal_request.amount} TON –æ—Ç–º–µ–Ω–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –∫–æ—à–µ–ª–µ–∫.")
    else:
        await call.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥.")
    session.close()


@dp.callback_query_handler(lambda call: call.data.startswith('cancel_'))
async def handle_cancel_withdrawal(call: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥
        withdrawal_request_id = int(call.data.split('_')[1])

        session = Session()
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        withdrawal_request = session.query(
            WithdrawalRequest).get(withdrawal_request_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        if withdrawal_request and withdrawal_request.status == "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ":
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –∑–∞–ø—Ä–æ—Å–æ–º
            user = session.query(User).get(withdrawal_request.user_id)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.balance += withdrawal_request.amount
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤
            user.total_withdrawals -= withdrawal_request.amount

            # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ "–æ—Ç–º–µ–Ω–µ–Ω–æ"
            withdrawal_request.status = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
            session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤ —á–∞—Ç
            await call.message.answer("–ê—Ö, –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω! –°–ª—ã—à –¥—Ä–æ—á–µ—Ä, —Ç—ã —á—Ç–æ –æ–¥–Ω–æ–π —Ä—É–∫–æ–π –ø–∏—Å–∞–ª –∫–æ—à–µ–ª–µ–∫? –ê –≥–¥–µ –¥—Ä—É–≥–∞—è, –∞??")
            await bot.send_message(user.id, "–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
        else:
            await call.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥.")

        session.close()
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        await call.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞


@dp.callback_query_handler(lambda call: call.data.startswith('confirm_'))
async def handle_confirm_withdrawal(call: CallbackQuery):
    try:
        withdrawal_request_id = int(call.data.split('_')[1])
        session = Session()
        withdrawal_request = session.query(
            WithdrawalRequest).get(withdrawal_request_id)

        if withdrawal_request and withdrawal_request.status == "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ":
            user = session.query(User).get(withdrawal_request.user_id)

            # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            withdrawal_request.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            session.commit()

            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            if user.referred_by:
                referrer = session.query(User).get(user.referred_by)
                _, referrer_bonus = calculate_withdrawal_fee(
                    withdrawal_request.amount, get_user_level(user))
                referrer.balance += referrer_bonus
                session.commit()

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É —Å —É—Ä–æ–≤–Ω–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                await notify_referrer(referrer.id, referrer_bonus, user.username, get_user_level(user))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤ —á–∞—Ç
            await call.message.answer(f"–ó–∞—è–≤–∫–∞ {withdrawal_request.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í—ã–≤–æ–¥ –Ω–∞ {withdrawal_request.amount:.3f} TON –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            await bot.send_message(user.id, f"–¢–≤–æ–∏ {withdrawal_request.amount:.3f} TON —É–∂–µ –≤ –∫–æ—à–µ–ª—å–∫–µ! –ñ–¥—É —Ç–µ–±—è —Å–Ω–æ–≤–∞, –¥—Ä–æ—á–µ—Ä!")
        else:
            await call.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥.")

        session.close()
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        await call.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")


async def notify_referrer(referrer_id, amount, referred_username, referred_user_level):
    if referred_user_level > 1:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –±–æ–ª—å—à–µ 1
        await bot.send_message(
            referrer_id,
            f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å {amount:.5f} TON –∑–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∫–æ–≥–æ-—Ç–æ –∏–∑ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π."
        )


async def send_message(chat_id, message):
    await bot.send_message(chat_id, message)


@dp.callback_query_handler(lambda call: call.data.startswith('auto_withdraw_'))
async def handle_auto_withdrawal(call: CallbackQuery):
    from withdrawals import process_auto_withdrawal

    try:
        withdrawal_request_id = int(call.data.split('_')[2])
        session = Session()
        withdrawal_request = session.query(
            WithdrawalRequest).get(withdrawal_request_id)

        if withdrawal_request and withdrawal_request.status == "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ":
            user = session.query(User).get(withdrawal_request.user_id)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
            await process_auto_withdrawal(
                withdrawal_request_id,
                user.id,
                withdrawal_request.amount,
                withdrawal_request.wallet,
                send_message  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_message
            )

            await call.message.answer(f"–ó–∞—è–≤–∫–∞ {withdrawal_request.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –í—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} –∑–∞–ø—É—â–µ–Ω.")
        else:
            await call.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥.")

        session.close()
    except Exception as e:
        await call.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")


def calculate_withdrawal_fee(amount):
    return amount * 0.05
# –ö–û–ú–ò–°–°–ò–Ø–ò –£–†–û–í–ù–ò


def get_user_level(user):
    total_spent = user.total_spent_on_feed
    if total_spent < 5:
        return 1
    elif total_spent < 10:
        return 2
    elif total_spent < 20:
        return 3
    elif total_spent < 25:
        return 4
    else:
        return 4


def calculate_withdrawal_fee(amount, user_level):
    if user_level == 1:
        return amount * 0.10, 0  # 10% –∫–æ–º–∏—Å—Å–∏—è, 0% —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    elif user_level == 2:
        return amount * 0.09, amount * 0.01  # 9% –∫–æ–º–∏—Å—Å–∏—è, 1% —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    elif user_level == 3:
        return amount * 0.08, amount * 0.02  # 8% –∫–æ–º–∏—Å—Å–∏—è, 2% —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    else:  # user_level == 4
        return amount * 0.07, amount * 0.03  # 7% –∫–æ–º–∏—Å—Å–∏—è, 3% —Ä–µ—Ñ–µ—Ä–µ—Ä—É


# ADMIN PANEL

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_action = State()
    waiting_for_amount = State()
    selecting_withdrawal = State()
    # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    waiting_for_broadcast_text = State()
    confirming_broadcast = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selecting_user_method = State()


USERS_PER_PAGE = 5   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


async def get_users_page(page_num):
    session = Session()
    offset = (page_num - 1) * USERS_PER_PAGE
    users = session.query(User).order_by(User.id).offset(
        offset).limit(USERS_PER_PAGE).all()
    session.close()
    return users


@dp.message_handler(commands=['admin'], user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_admin_command(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üèÜ Top Referrers"),
        types.KeyboardButton("üì• –í—ã–±—Ä–∞—Ç—å –∑–∞—è–≤–∫—É")
    )
    markup.add(
        types.KeyboardButton("üë§ –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        types.KeyboardButton("–ß–µ–∫–∏ CryptoBot")
    )
    markup.add(
        types.KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
        types.KeyboardButton("üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–∞–±–æ—Ç–æ–∫"
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@dp.message_handler(lambda message: message.text == "üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫", user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_earnings_command(message: types.Message):
    session = Session()
    total_earned = session.query(func.sum(WithdrawalRequest.amount)).filter_by(
        status="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ").scalar() or 0
    session.close()

    # Calculate earnings with a 10% commission deduction
    commission = total_earned * 0.10
    final_earnings = total_earned - commission

    await message.answer(f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned:.5f} TON\n–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏ (10%): {final_earnings:.5f} TON")


@dp.message_handler(lambda message: message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_broadcast_command(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await AdminStates.waiting_for_broadcast_text.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏


@dp.message_handler(state=AdminStates.waiting_for_broadcast_text, user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_broadcast_text(message: types.Message, state: FSMContext):
    broadcast_text = message.text

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        "–î–∞", callback_data="confirm_broadcast"))
    markup.add(types.InlineKeyboardButton(
        "–ù–µ—Ç", callback_data="cancel_broadcast"))

    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{broadcast_text}\n\n", reply_markup=markup)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ state
    await state.update_data(broadcast_text=broadcast_text)
    await AdminStates.confirming_broadcast.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞"


@dp.callback_query_handler(lambda call: call.data == "confirm_broadcast", state=AdminStates.confirming_broadcast, user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def confirm_broadcast(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    broadcast_text = data.get("broadcast_text")
    await state.finish()

    session = Session()
    users = session.query(User).all()
    session.close()

    await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")

    # –¶–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user in users:
        try:
            await bot.send_message(user.id, broadcast_text)
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API Telegram
            await asyncio.sleep(2)
        except Exception as e:
            await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username}: {e}")
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API Telegram
            await asyncio.sleep(2)
    await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ—Ç"


@dp.callback_query_handler(lambda call: call.data == "cancel_broadcast", state=AdminStates.confirming_broadcast, user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def cancel_broadcast(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@dp.message_handler(lambda message: message.text == "–ß–µ–∫–∏ CryptoBot", user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_cryptobot_checks(message: types.Message):
    checks_info = await get_cryptobot_checks()

    if checks_info:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup()
        for line in checks_info.splitlines():
            check_id = line.split(",")[0].split(":")[1].strip()
            keyboard.add(types.InlineKeyboardButton(
                text=f"–£–¥–∞–ª–∏—Ç—å {check_id}", callback_data=f"delete_check_{check_id}"))
        keyboard.add(types.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="delete_all_checks"))

        await message.answer(f"–ß–µ–∫–∏ CryptoBot:\n{checks_info}", reply_markup=keyboard)

    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–∞—Ö.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"


@dp.callback_query_handler(lambda c: c.data.startswith('delete_check_'))
async def delete_check_handler(callback_query: types.CallbackQuery):
    check_id = int(callback_query.data.split('_')[-1])
    deleted_check = await delete_check(check_id)

    if deleted_check:
        await bot.answer_callback_query(callback_query.id, text=f"–ß–µ–∫ {check_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–∞—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        await handle_cryptobot_checks(callback_query.message)
    else:
        await bot.answer_callback_query(callback_query.id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–∞ {check_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ"


@dp.callback_query_handler(lambda c: c.data == "delete_all_checks")
async def delete_all_checks_handler(callback_query: types.CallbackQuery):
    await delete_all_checks()
    await bot.answer_callback_query(callback_query.id, text="–í—Å–µ —á–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–∞—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await handle_cryptobot_checks(callback_query.message)


@dp.message_handler(lambda message: message.text == "üì• –í—ã–±—Ä–∞—Ç—å –∑–∞—è–≤–∫—É", user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_select_withdrawal(message: types.Message, state: FSMContext):
    pending_withdrawals = get_pending_withdrawals()

    if not pending_withdrawals:
        await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        return

    markup = types.InlineKeyboardMarkup()
    for withdrawal in pending_withdrawals:
        button_text = f"{withdrawal.username} - {withdrawal.amount} TON"
        callback_data = f"withdrawal_id_{withdrawal.id}"
        markup.add(types.InlineKeyboardButton(
            button_text, callback_data=callback_data))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥:", reply_markup=markup)


@dp.callback_query_handler(lambda call: call.data.startswith('withdrawal_id_'))
async def handle_withdrawal_selection(call: CallbackQuery):
    withdrawal_id = int(call.data.split('_')[2])
    session = Session()
    withdrawal_request = session.query(WithdrawalRequest).get(withdrawal_id)

    if withdrawal_request:
        user = session.query(User).get(withdrawal_request.user_id)
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.
        current_balance = user.balance

        withdrawal_message = f"""
üéñÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –í—ã–≤–æ–¥ üéñÔ∏è 

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} ({user.id})
üíé TON –±–∞–ª–∞–Ω—Å –¥–æ –≤—ã–≤–æ–¥–∞: {current_balance:.5f}
üíé TON –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞: {user.balance - withdrawal_request.amount:.5f}
üçå –ö—É–ø–ª–µ–Ω–æ –∏–≥—Ä—É—à–µ–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user.total_spent_on_feed:.5f} TON 
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user.total_earned:.5f} TON
üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {user.total_bonus_profit:.5f} TON 
üì§ –í—ã–≤–µ–¥–µ–Ω–æ: {user.total_withdrawals + withdrawal_request.amount:.5f} TON

–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {withdrawal_request.amount} TON
–ö–æ—à–µ–ª–µ–∫: {withdrawal_request.wallet}



"""

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏ —Ä–∞–∑–º–µ—Ç–∫—É
        confirmation_message, confirmation_markup = generate_confirmation_message(
            withdrawal_request.id, withdrawal_message
        )

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
        await bot.send_message(WITHDRAWAL_REQUESTS_CHAT_ID, confirmation_message, reply_markup=confirmation_markup)
        await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    else:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    session.close()


@dp.message_handler(lambda message: message.text == "üë§ –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_select_user(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        "UserName", callback_data="select_by_username"))
    markup.add(types.InlineKeyboardButton(
        "ID", callback_data="select_by_id"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "ID"
    markup.add(types.InlineKeyboardButton(
        "–°–ø–∏—Å–æ–∫", callback_data="select_from_list"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    await AdminStates.selecting_user_method.set()


@dp.callback_query_handler(lambda call: call.data == "select_by_username", state=AdminStates.selecting_user_method, user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_select_by_username(call: CallbackQuery):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å markup
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã)", reply_markup=markup)
    await AdminStates.waiting_for_user_id.set()


@dp.callback_query_handler(lambda call: call.data == "select_by_id", state=AdminStates.selecting_user_method, user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_select_by_id(call: CallbackQuery):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã)", reply_markup=markup)
    await AdminStates.waiting_for_user_id.set()
    await dp.current_state().set_state("waiting_for_user_id")


@dp.message_handler(state="waiting_for_user_id", user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def process_user_id(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await handle_admin_command(message)
        return

    try:
        user_id = int(message.text)
        session = Session()
        user = session.query(User).get(user_id)
        session.close()

        if user:
            await state.update_data(user_id=user.id)

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–ë–∞–ª–∞–Ω—Å"),
                       types.KeyboardButton("–í—ã–ø–ª–∞—Ç—ã"))
            markup.add(types.KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å"),
                       types.KeyboardButton("–°–ø–∏—Å–∞—Ç—å"))
            markup.add(types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton(
                "–£–±—Ä–∞—Ç—å –º–µ–Ω—é"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

            await message.answer(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
            await AdminStates.waiting_for_action.set()
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø–∏—Å–æ–∫"


@dp.callback_query_handler(lambda call: call.data == "select_from_list", state=AdminStates.selecting_user_method, user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_select_from_list(call: CallbackQuery):
    users = await get_users_page(1)
    await display_users_page(call.message, users, 1)


async def display_users_page(message, users, page_num):
    markup = InlineKeyboardMarkup(row_width=2)
    for user in users:
        button = InlineKeyboardButton(
            f"@{user.username}", callback_data=f"user_id_{user.id}")
        markup.insert(button)

    if page_num > 1:
        prev_button = InlineKeyboardButton(
            "‚¨ÖÔ∏è", callback_data=f"prev_page_{page_num-1}")
        markup.row(prev_button)

    if len(users) == USERS_PER_PAGE:
        next_button = InlineKeyboardButton(
            "‚û°Ô∏è", callback_data=f"next_page_{page_num+1}")
        markup.row(next_button)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)


@dp.message_handler(state=AdminStates.waiting_for_user_id, user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def process_user_id(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await handle_admin_command(message)
        return

    username = message.text.lstrip('@')  # –£–¥–∞–ª–µ–Ω–∏–µ "@" –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

    session = Session()
    user = session.query(User).filter_by(username=username).first()
    session.close()

    if user:
        await state.update_data(user_id=user.id)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ë–∞–ª–∞–Ω—Å"),
                   types.KeyboardButton("–í—ã–ø–ª–∞—Ç—ã"))
        markup.add(types.KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å"),
                   types.KeyboardButton("–°–ø–∏—Å–∞—Ç—å"))
        markup.add(types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton(
            "–£–±—Ä–∞—Ç—å –º–µ–Ω—é"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

        await message.answer(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        await AdminStates.waiting_for_action.set()
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.callback_query_handler(lambda call: call.data.startswith('user_id_'), state=AdminStates.selecting_user_method, user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def handle_user_selection(call: CallbackQuery, state: FSMContext):
    user_id = int(call.data.split('_')[2])
    await state.update_data(user_id=user_id)

    session = Session()
    user = session.query(User).get(user_id)
    session.close()
    new_chat_id = -
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ë–∞–ª–∞–Ω—Å"), types.KeyboardButton("–í—ã–ø–ª–∞—Ç—ã"))
    markup.add(types.KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å"),
               types.KeyboardButton("–°–ø–∏—Å–∞—Ç—å"))
    markup.add(types.KeyboardButton("–£–±—Ä–∞—Ç—å –º–µ–Ω—é"))

    await call.message.answer(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    await AdminStates.waiting_for_action.set()


@dp.callback_query_handler(lambda call: call.data.startswith('prev_page_'))
async def handle_prev_page(call: types.CallbackQuery):
    page_num = int(call.data.split('_')[2])
    users = await get_users_page(page_num)
    await display_users_page(call.message, users, page_num)


@dp.callback_query_handler(lambda call: call.data.startswith('next_page_'))
async def handle_next_page(call: types.CallbackQuery):
    page_num = int(call.data.split('_')[2])
    users = await get_users_page(page_num)
    await display_users_page(call.message, users, page_num)


@dp.message_handler(state=AdminStates.waiting_for_action, user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def process_action(message: types.Message, state: FSMContext):
    action = message.text.lower()
    data = await state.get_data()
    user_id = data.get("user_id")

    if action == "/admin":  # Check for /admin command
        await state.finish()
        await handle_admin_command(message)
        return

    elif action == "–±–∞–ª–∞–Ω—Å":
        balance = get_user_balance(user_id)
        if balance is not None:
            await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {balance:.5f} TON")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif action == "–≤—ã–ø–ª–∞—Ç—ã":
        withdrawals = get_user_withdrawals(user_id)
        if withdrawals:
            withdrawals_text = "\n".join(
                [f"{w.id} - {w.amount} TON ({w.status})" for w in withdrawals])
            await message.answer(f"–í—ã–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{withdrawals_text}")
        else:
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤—ã–ø–ª–∞—Ç.")
    elif action == "–ø–æ–ø–æ–ª–Ω–∏—Ç—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
        await AdminStates.waiting_for_amount.set()
        await state.update_data(action="–ø–æ–ø–æ–ª–Ω–∏—Ç—å")
    elif action == "—Å–ø–∏—Å–∞—Ç—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:")
        await AdminStates.waiting_for_amount.set()
        await state.update_data(action="—Å–ø–∏—Å–∞—Ç—å")
    elif action == "—É–±—Ä–∞—Ç—å –º–µ–Ω—é":
        await state.finish()
        await handle_admin_command(message)
    elif action == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await show_user_stats(message, user_id)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

# ... (your existing code)


async def show_user_stats(message: types.Message, user_id: int):
    session = Session()
    user = session.query(User).get(user_id)
    session.close()

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_level = get_user_level(user)

    stats_text = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} ({user.id}):

üèÖ –£—Ä–æ–≤–µ–Ω—å: {user_level}
üíé –ë–∞–ª–∞–Ω—Å: {user.balance:.5f} TON

üçå –ö—É–ø–ª–µ–Ω–æ –∏–≥—Ä—É—à–µ–∫: {user.total_spent_on_feed:.5f} TON 
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.total_earned:.5f} TON
üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {user.total_bonus_profit:.5f} TON 
üì§ –í—ã–≤–µ–¥–µ–Ω–æ: {user.total_withdrawals:.5f} TON

"""

    active_feed_text = ""
    for i in range(1, 13):
        toy_attr = f"toy{i}"
        time_attr = f"toy_time{i}"
        if getattr(user, toy_attr):
            purchase_time = getattr(user, time_attr)

            remaining_time_seconds = int(
                getattr(user, f"{toy_attr}_remaining_time"))

            if i == 1:
                amount = 0.1
                bonus = 0.085
            elif i == 2:
                amount = 0.5
                bonus = 0.07
            elif i == 3:
                amount = 1
                bonus = 0.45
            elif i == 4:
                amount = 3
                bonus = 0.85
            elif i == 5:
                amount = 2
                bonus = 0.65
            elif i == 6:
                amount = 5
                bonus = 1.10
##
            elif i == 7:
                amount = 8
                bonus = 1.40
            elif i == 8:
                amount = 10
                bonus = 2
            elif i == 9:
                amount = 15
                bonus = 3
            elif i == 10:
                amount = 20
                bonus = 3.5
            elif i == 11:
                amount = 25
                bonus = 4.40

            def get_hours_minutes_seconds_word(hours, minutes, seconds):
                if hours == 1:
                    hours_word = '—á–∞—Å'
                elif 2 <= hours <= 4:
                    hours_word = '—á–∞—Å–∞'
                else:
                    hours_word = '—á–∞—Å–æ–≤'

                if minutes == 1:
                    minutes_word = '–º–∏–Ω—É—Ç–∞'
                elif 2 <= minutes <= 4:
                    minutes_word = '–º–∏–Ω—É—Ç—ã'
                else:
                    minutes_word = '–º–∏–Ω—É—Ç'

                if seconds == 1:
                    seconds_word = '—Å–µ–∫—É–Ω–¥–∞'
                else:
                    seconds_word = '—Å–µ–∫—É–Ω–¥'

                return hours_word, minutes_word, seconds_word

            hours_left = remaining_time_seconds // 3600
            minutes_left = (remaining_time_seconds % 3600) // 60
            seconds_left = remaining_time_seconds % 60
            hours_word, minutes_word, seconds_word = get_hours_minutes_seconds_word(
                hours_left, minutes_left, seconds_left)

            formatted_time = purchase_time.strftime("%d %b, %H:%M:%S")
            active_feed_text += f"üçå {amount}+{bonus} TON –æ—Ç {formatted_time} (–û—Å—Ç–∞–ª–æ—Å—å {hours_left} {hours_word} {minutes_left} {minutes_word} {seconds_left} {seconds_word})\n"
    if active_feed_text:
        stats_text += "\n–ò–≥—Ä—É—à–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ:\n" + active_feed_text + ""

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(stats_text, reply_markup=types.ReplyKeyboardRemove())

# Handler for amount input


@dp.message_handler(state=AdminStates.waiting_for_amount, user_id=ADMIN_IDS, chat_id=ADMIN_PANEL_CHAT_ID)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        user_id = data.get("user_id")
        action = data.get("action")

        if action == "–ø–æ–ø–æ–ª–Ω–∏—Ç—å":
            success = top_up_balance(user_id, amount)
            if success:
                await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.5f} TON.")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
        elif action == "—Å–ø–∏—Å–∞—Ç—å":
            success = deduct_balance(user_id, amount)
            if success:
                await message.answer(f"–° –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–∞–Ω–æ {amount:.5f} TON.")
            else:
                await message.answer("–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞.")

        await state.finish()
        await handle_admin_command(message)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π format —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(check_toys_returns())  # Start the background task
    executor.start_polling(dp, skip_updates=True)
